<Window x:Class="FlagSync.View.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:FlagSync.View"
        xmlns:properties="clr-namespace:FlagSync.View.Properties"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        d:DesignHeight="768" d:DesignWidth="1024"
        Title="FlagSync" Icon="/FlagSync;component/Images/ApplicationIcon.ico"
        WindowState="Maximized" Closing="Window_Closing"
        MinWidth="800" MinHeight="600"
        Loaded="Window_Loaded">
    <Window.DataContext>
        <local:MainWindowViewModel x:Name="mainWindowViewModel" x:FieldModifier="private" />
    </Window.DataContext>
    <Window.Resources>
        <local:ByteToKiloByteConverter x:Key="ByteToKiloByteConverter"/>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <Style TargetType="{x:Type TabItem}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid>
                            <Border Name="Border" Background="White" BorderBrush="Black" BorderThickness="1">
                                <StackPanel Orientation="Horizontal">
                                    <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="12, 2, 12, 2"/>
                                </StackPanel>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Border" Property="Background" Value="CornflowerBlue" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Border" Property="Background" Value="White" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="MouseOverButtonStyle" TargetType="Button">
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Black" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="ProgressBar">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ProgressBar">
                        <Border BorderBrush="Black" Background="Silver">
                            <Grid x:Name="PART_Track">
                                <Rectangle x:Name="PART_Indicator" HorizontalAlignment="Left" Fill="#FF01D328" />
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="Button">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border" BorderBrush="Black" Padding="5" Background="CornflowerBlue">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="RenderTransform" >
                                    <Setter.Value>
                                        <ScaleTransform ScaleX="1.025" ScaleY="1.025" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="RenderTransform" >
                                    <Setter.Value>
                                        <ScaleTransform ScaleX=".95" ScaleY=".95" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="border" Property="Background" Value="Silver" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid HorizontalAlignment="Stretch">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Menu Grid.Row="0" Height="25" HorizontalAlignment="Stretch" Width="Auto" VerticalAlignment="Top" Background="#FFF0F0F0">
            <MenuItem Header="{x:Static properties:Resources.ProgramMenuItemText}">
                <MenuItem Header="{x:Static properties:Resources.LanguageMenuItemText}">
                    <MenuItem Header="{x:Static properties:Resources.EnglishString}" Click="englishMenuItem_Click" />
                    <MenuItem Header="{x:Static properties:Resources.GermanString}" Click="germanMenuItem_Click" />
                </MenuItem>
                <MenuItem Header="{x:Static properties:Resources.ExitMenuItemText}" Command="{Binding Path=ExitApplicationCommand}" />
            </MenuItem>
            <MenuItem Header="{x:Static properties:Resources.HelpMenuItemText}">
                <MenuItem Header="{x:Static properties:Resources.AboutString}" Click="aboutMenuItem_Click" />
            </MenuItem>
        </Menu>
        <Grid Grid.Row="1" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  Margin="5, 10, 5, 5" MinHeight="100">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <GroupBox Header="{x:Static properties:Resources.CurrentJobGroupBoxText}" Height="Auto" Width="Auto" Padding="3" Grid.Column="0">
                <Grid>
                    <Grid Visibility="{Binding Path=IsRunning, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock Grid.Row="0" Grid.Column="0" Text="{x:Static properties:Resources.NameTextBlockText}" />
                        <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding Path=CurrentJob.Name}" Margin="10,0,0,0" />
                        <TextBlock Grid.Row="1" Grid.Column="0" Text="{x:Static properties:Resources.DirectoryATextBlockText}" />
                        <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding Path=CurrentJob.DirectoryA}" Margin="10,0,0,0" />
                        <TextBlock Grid.Row="2" Grid.Column="0" Text="{x:Static properties:Resources.DirectoryBTextBlockText}" />
                        <TextBlock Grid.Row="2" Grid.Column="1" Text="{Binding Path=CurrentJob.DirectoryB}" Margin="10,0,0,0" />
                        <TextBlock Grid.Row="3" Grid.Column="0" Text="{x:Static properties:Resources.ModeTextBlockText}" />
                        <TextBlock Grid.Row="3" Grid.Column="1" Text="{Binding Path=CurrentJob.SyncModeString}" Margin="10,0,0,0" />
                    </Grid>
                    <TextBlock FontWeight="Bold" Text="{x:Static properties:Resources.NoActiveJobText}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock.Style>
                            <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsRunning}" Value="True">
                                        <Setter Property="Visibility" Value="Hidden" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=IsRunning}" Value="False">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                       </TextBlock.Style>
                    </TextBlock>
                </Grid>
            </GroupBox>
            <GroupBox Grid.Column="1" Header="{x:Static properties:Resources.ControlPanelGroupBoxText}" Height="Auto" Width="Auto" Padding="3">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="25" />
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0">
                        <ProgressBar Grid.Row="0" Height="20" HorizontalAlignment="Stretch" Width="Auto" Maximum="{Binding Path=CountedBytes, Converter={StaticResource ByteToKiloByteConverter}, UpdateSourceTrigger=PropertyChanged}" Value="{Binding Path=ProceededBytes, Mode=OneWay, Converter={StaticResource ByteToKiloByteConverter}, UpdateSourceTrigger=PropertyChanged}" IsIndeterminate="{Binding Path=IsCounting, UpdateSourceTrigger=PropertyChanged}" Minimum="0" />
                        <StackPanel Grid.Row="2" HorizontalAlignment="Center" Orientation="Horizontal">
                            <TextBlock Text="{x:Static properties:Resources.TotalProgressText}"/>
                            <TextBlock Text=" " />
                            <TextBlock Text="{Binding Path=TotalProgressPercentage, StringFormat=\{0:F\}%}" />
                            <TextBlock Text=" " />
                            <TextBlock Text="{Binding Path=AverageSpeed, StringFormat=@ \{0\}}" Visibility="{Binding Path=IsRunning, Converter={StaticResource BooleanToVisibilityConverter}}" />
                        </StackPanel>
                    </Grid>
                    <Grid Grid.Row="1" Margin="0,3">
                        <ProgressBar Grid.Row="0" Height="20" HorizontalAlignment="Stretch" Width="Auto" Value="{Binding Path=CurrentProgress, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                        <StackPanel Grid.Row="2" HorizontalAlignment="Center" Orientation="Horizontal">
                            <TextBlock Text="{x:Static properties:Resources.CurrentProgressText}"/>
                            <TextBlock Text=" " />
                            <TextBlock Text="{Binding Path=CurrentProgress, UpdateSourceTrigger=PropertyChanged, FallbackValue=0, StringFormat=\{0\}%}" />
                        </StackPanel>
                    </Grid>
                    <Grid Grid.Row="2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Button Grid.Column="0" Content="{x:Static properties:Resources.PreviewButtonText}" Margin="0, 0, 5, 0" Command="{Binding Path=StartJobWorkerCommand}" CommandParameter="true" />
                        <Button Grid.Column="1" Content="{x:Static properties:Resources.StartButtonText}" Margin="5, 0, 5, 0" Command="{Binding Path=StartJobWorkerCommand}" CommandParameter="false" />
                        <Button Grid.Column="2" Content="{Binding Path=PauseOrContinueString, UpdateSourceTrigger=PropertyChanged}" Margin="5, 0, 5, 0" Command="{Binding Path=PauseOrContinueJobWorkerCommand}" />
                        <Button Grid.Column="3" Content="{x:Static properties:Resources.StopButtonText}" Margin="5, 0, 0, 0" Command="{Binding Path=StopJobWorkerCommand}" />
                    </Grid>
                </Grid>
            </GroupBox>
        </Grid>
        <TabControl Grid.Row="2" Margin="5,0,5,5" SelectedIndex="{Binding Path=TabIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="/FlagSync;component/Images/Settings.png" Width="20" Height="20" />
                        <ContentPresenter Content="{x:Static properties:Resources.SettingsTabItemText}" Margin="5,0,0,0" VerticalAlignment="Center" />
                    </StackPanel>
                </TabItem.Header>
                <Grid Margin="0,10,0,5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid Grid.Column="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Button Grid.Column="0" Name="newJobButton" ToolTip="{x:Static properties:Resources.NewJobButtonText}" Click="newJobButton_Click" BorderThickness="0" BorderBrush="Transparent" Background="Transparent" Style="{StaticResource MouseOverButtonStyle}" x:FieldModifier="private">
                                <Button.Content>
                                    <StackPanel Orientation="Vertical">
                                        <Image Source="/FlagSync;component/Images/Add.png" Width="50" Height="50" />
                                        <ContentPresenter Content="{x:Static properties:Resources.NewString}" HorizontalAlignment="Center" />
                                    </StackPanel>
                                </Button.Content>
                                <Button.ContextMenu>
                                    <ContextMenu>
                                        <ContextMenu.Template>
                                            <ControlTemplate>
                                                <StackPanel Orientation="Horizontal">
                                                    <Button Height="75" Width="75" Background="White" Click="newLocalJobButton_Click">
                                                        <StackPanel Orientation="Vertical">
                                                            <Image Source="/FlagSync;component/Images/Local.png" Width="50" Height="50" />
                                                            <ContentPresenter Content="{x:Static properties:Resources.LocalString}" HorizontalAlignment="Center" />
                                                        </StackPanel>
                                                    </Button>
                                                    <Button Height="75" Width="75" Background="White" Click="newFtpJobButton_Click">
                                                        <StackPanel Orientation="Vertical">
                                                            <Image Source="/FlagSync;component/Images/FTPServer.png" Width="50" Height="50" />
                                                            <ContentPresenter Content="{x:Static properties:Resources.FTPString}" HorizontalAlignment="Center" />
                                                        </StackPanel>
                                                    </Button>
                                                    <Button Height="75" Width="75" Background="White" Click="newITunesJobButton_Click">
                                                        <StackPanel Orientation="Vertical">
                                                            <Image Source="/FlagSync;component/Images/iTunes.png" Width="50" Height="50" />
                                                            <ContentPresenter Content="{x:Static properties:Resources.iTunesString}" HorizontalAlignment="Center" />
                                                        </StackPanel>
                                                    </Button>
                                                </StackPanel>
                                            </ControlTemplate>
                                        </ContextMenu.Template>
                                    </ContextMenu>
                                </Button.ContextMenu>
                            </Button>
                            <Button Grid.Column="1" ToolTip="{x:Static properties:Resources.DeleteJobButtonText}" BorderThickness="0" BorderBrush="Transparent" Background="Transparent" Style="{StaticResource MouseOverButtonStyle}" Command="{Binding Path=DeleteSelectedJobSettingCommand}">
                                <StackPanel Orientation="Vertical">
                                    <Image Source="/FlagSync;component/Images/Remove.png" Width="50" Height="50" />
                                    <ContentPresenter Content="{x:Static properties:Resources.DeleteString}" HorizontalAlignment="Center" />
                                </StackPanel>
                            </Button>
                            <Button Grid.Column="2" ToolTip="{x:Static properties:Resources.LoadJobsButtonText}" Click="loadJobsButton_Click" BorderThickness="0" BorderBrush="Transparent" Background="Transparent" Style="{StaticResource MouseOverButtonStyle}">
                                <StackPanel Orientation="Vertical">
                                    <Image Source="/FlagSync;component/Images/Load.png" Width="50" Height="50" />
                                    <ContentPresenter Content="{x:Static properties:Resources.LoadString}" HorizontalAlignment="Center" />
                                </StackPanel>
                            </Button>
                            <Button Grid.Column="3" ToolTip="{x:Static properties:Resources.SaveJobsButtonText}" Click="saveJobsButton_Click" BorderThickness="0" BorderBrush="Transparent" Background="Transparent" Style="{StaticResource MouseOverButtonStyle}">
                                <StackPanel Orientation="Vertical">
                                    <Image Source="/FlagSync;component/Images/Save.png" Width="50" Height="50" />
                                    <ContentPresenter Content="{x:Static properties:Resources.SaveString}" HorizontalAlignment="Center" />
                                </StackPanel>
                            </Button>
                        </Grid>
                        <ListBox Grid.Row="1" SelectedItem="{Binding Path=SelectedJobSetting, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding Path=JobSettings, UpdateSourceTrigger=PropertyChanged}" Margin="0,10,0,0" MaxWidth="225">
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="{x:Type ListBoxItem}">
                                    <Setter Property="Margin" Value="5" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                <Grid>
                                                    <Border Name="Border" Padding="1" Background="Silver" >
                                                        <StackPanel>
                                                            <ContentPresenter />
                                                        </StackPanel>
                                                    </Border>
                                                    <Border Padding="1" BorderThickness="2" BorderBrush="Red" Visibility="{Binding RelativeSource={RelativeSource Self}, Path=DataContext.HasErrors, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsSelected" Value="True">
                                                        <Setter Property="BorderThickness" TargetName="Border" Value="0" />
                                                        <Setter Property="Background" TargetName="Border" Value="LightBlue" />
                                                    </Trigger>
                                                    <Trigger Property="IsSelected" Value="false">
                                                        <Setter Property="BorderThickness" TargetName="Border" Value="0" />
                                                        <Setter Property="Background" TargetName="Border" Value="LightGray" />
                                                    </Trigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsSelected" Value="true" />
                                                            <Condition Property="Selector.IsSelectionActive" Value="false" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter Property="Background" TargetName="Border" Value="SkyBlue" />
                                                        <Setter Property="BorderBrush" TargetName="Border" Value="Blue" />
                                                    </MultiTrigger>
                                                    <Trigger Property="IsEnabled" Value="false">
                                                        <Setter Property="Foreground" Value="LightGray" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Margin="5" Orientation="Horizontal">
                                        <StackPanel Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListBoxItem, AncestorLevel=1}, Path=IsMouseOver, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Button Height="20" Width="20" Padding="0" Margin="1">
                                                <Image Source="/FlagSync;component/Images/UpArrow.png" />
                                            </Button>
                                            <Button Height="20" Width="20" Padding="0" Margin="1">
                                                <Image Source="/FlagSync;component/Images/DownArrow.png" />
                                            </Button>
                                        </StackPanel>
                                        <CheckBox Margin="5, 0, 0, 0" IsChecked="{Binding Path=IsIncluded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" />
                                        <Grid Margin="10, 0, 0, 0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="*" />
                                            </Grid.RowDefinitions>
                                            <TextBlock Grid.Column="0" Grid.Row="0" Text="{x:Static properties:Resources.ListBoxItemJobNameText}" FontWeight="Bold" Foreground="Green" />
                                            <TextBlock Grid.Column="0" Grid.Row="1" Text="{x:Static properties:Resources.ListBoxItemJobTypeText}" FontWeight="Bold" />
                                            <TextBlock Grid.Column="1" Grid.Row="0" Margin="5, 0, 0, 0" Text="{Binding Path=Name}" Foreground="#FFFF6700" FontWeight="Bold" />
                                            <TextBlock Grid.Column="1" Grid.Row="1" Margin="5, 0, 0, 0" Text="{Binding Path=SyncModeString}" />
                                        </Grid>
                                    </StackPanel>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                        <TextBlock Grid.Row="1" Text="{x:Static properties:Resources.NoJobText}" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" FontWeight="Bold" FontStyle="Normal" Visibility="{Binding Path=HasNoJobs, Converter={StaticResource BooleanToVisibilityConverter}}" TextWrapping="Wrap" MaxWidth="150" />
                    </Grid>
                    <ItemsControl Grid.Column="1" ItemsSource="{Binding Path=CurrentJobSettingsPanel, UpdateSourceTrigger=PropertyChanged}" />
                </Grid>
            </TabItem>
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="/FlagSync;component/Images/Log.png" Width="20" Height="20" />
                        <ContentPresenter Content="{x:Static properties:Resources.LogTabItemText}" Margin="5,0,0,0" VerticalAlignment="Center" />
                    </StackPanel>
                </TabItem.Header>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="100" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <TextBox Grid.Row="0" Text="{Binding Path=StatusMessages, UpdateSourceTrigger=PropertyChanged, IsAsync=True, Mode=OneWay}" IsReadOnly="True" TextChanged="TextBox_TextChanged" Cursor="Arrow" />
                    <ListView Grid.Row="1" ItemsSource="{Binding Path=LogMessages, UpdateSourceTrigger=PropertyChanged, IsAsync=True}" SelectionChanged="ListView_SelectionChanged" SelectedIndex="{Binding Path=LastLogMessageIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, IsAsync=True}" SelectionMode="Single">
                        <ListView.View>
                            <GridView AllowsColumnReorder="False">
                                <GridViewColumn Width="30">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <Image Source="{Binding Path=Image}" />
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="{x:Static properties:Resources.ActionGridViewColumnText}" Width="75">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Path=Action}" TextTrimming="CharacterEllipsis" />
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="{x:Static properties:Resources.TypeGridViewColumnText}" Width="75">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Path=Type}" TextTrimming="CharacterEllipsis" />
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="{x:Static properties:Resources.FileSizeGridViewColumnText}">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Path=FileSize}" TextTrimming="CharacterEllipsis" />
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="{x:Static properties:Resources.SourceGridViewColumnText}">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Path=SourcePath}" TextTrimming="CharacterEllipsis" />
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="{x:Static properties:Resources.TargetGridViewColumnText}">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Path=TargetPath}" TextTrimming="CharacterEllipsis" />
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                            </GridView>
                        </ListView.View>
                    </ListView>
                </Grid>
            </TabItem>
        </TabControl>
        <StatusBar Grid.Row="3" Width="Auto" Height="25">
            <StatusBarItem Content="{Binding Path=LastStatusMessage}" />
            <StatusBarItem Visibility="{Binding Path=IsNewVersionAvailable, Converter={StaticResource BooleanToVisibilityConverter}, IsAsync=True, Mode=OneTime, FallbackValue=Hidden}" HorizontalAlignment="Right">
                <Hyperlink NavigateUri="http://sourceforge.net/projects/flagsync/files/" RequestNavigate="Hyperlink_RequestNavigate">
                    <TextBlock Text="{x:Static properties:Resources.UpdateAvailableText}" />
                </Hyperlink>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>