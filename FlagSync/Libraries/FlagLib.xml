<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlagLib</name>
    </assembly>
    <members>
        <member name="T:FlagLib.Serialization.GenericXmlSerializer">
            <summary>
            Provides a static and generic xml serializer to serialize IEnumerables an single objects
            </summary>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.SaveEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Saves the specified items.
            </summary>
            <typeparam name="T">Type of the items</typeparam>
            <param name="items">The items.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.SaveSingle``1(``0,System.String)">
            <summary>
            Saves the specified item.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.ReadEnumerable``1(System.String)">
            <summary>
            Reads the specified path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.ReadSingle``1(System.String)">
            <summary>
            Reads the specified path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="T:FlagLib.Measure.Size">
            <summary>
            Encapsulates a width and a lenght
            </summary>
        </member>
        <member name="M:FlagLib.Measure.Size.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Measure.Size"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Measure.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Measure.Size"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlagLib.Measure.Size.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:FlagLib.Measure.Size.ToSystemDrawingSize">
            <summary>
            Converts the <see cref="T:FlagLib.Measure.Size"/> to a <see cref="T:System.Drawing.Size"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Size"/></returns>
        </member>
        <member name="M:FlagLib.Measure.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:FlagLib.Measure.Size.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="P:FlagLib.Measure.Size.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:FlagLib.Measure.Size.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:FlagLib.Console.Controls.MenuEventArgs`1">
            <summary>
            Provides data for the events that are raised by the <see cref="!:Menu"/> class
            </summary>
            <typeparam name="T">Type of the MenuItem</typeparam>
        </member>
        <member name="M:FlagLib.Console.Controls.MenuEventArgs`1.#ctor(FlagLib.Console.Controls.MenuItem{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Controls.MenuEventArgs`1"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:FlagLib.Console.Controls.MenuEventArgs`1.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:FlagLib.Console.Controls.Label">
            <summary>
            Represents a label that can show a text
            </summary>
        </member>
        <member name="T:FlagLib.Console.Controls.Control">
            <summary>
            Base class for all controls
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Control.Update">
            <summary>
            Updates the control if visible is set to true.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Control.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Control.Clear">
            <summary>
            Clears the control's area.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.Parent">
            <summary>
            Gets or sets the parent control.
            </summary>
            <value>The parent control.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.Top">
            <summary>
            Gets the top control (the screen).
            </summary>
            <value>The top control.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.RelativePosition">
            <summary>
            Gets or sets the relative position to the parent container.
            </summary>
            <value>The relative position to the parent container.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.AbsolutePosition">
            <summary>
            Gets the absolute position to the console.
            </summary>
            <value>The absolute position to the console.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.Size">
            <summary>
            Gets or sets the size of the control.
            </summary>
            <value>The size of the control.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlagLib.Console.Controls.Control"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FlagLib.Console.Controls.Label.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.Label.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:FlagLib.Patterns.ViewModelBase`1">
            <summary>
            Provides a abstract and generic view model base class, <para/>
            which implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
            </summary>
            <typeparam name="T">Type of the concrete view model</typeparam>
        </member>
        <member name="M:FlagLib.Patterns.ViewModelBase`1.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Called when a property has changed.
            </summary>
            <typeparam name="TValue">The type of the property.</typeparam>
            <param name="propertySelector">The property selector.</param>
        </member>
        <member name="E:FlagLib.Patterns.ViewModelBase`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:FlagLib.FileSystem.DirectoryScanner">
            <summary>
            Provides a directoy scanner to scan a directory recursively for files
            </summary>
        </member>
        <member name="M:FlagLib.FileSystem.DirectoryScanner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.FileSystem.DirectoryScanner"/> class.
            </summary>
            <param name="path">The path of the directory to search.</param>
        </member>
        <member name="M:FlagLib.FileSystem.DirectoryScanner.Start">
            <summary>
            Starts the directory scanner.
            </summary>
        </member>
        <member name="M:FlagLib.FileSystem.DirectoryScanner.OnFileFound(FlagLib.FileSystem.FileEventArgs)">
            <summary>
            Raises the <see cref="E:FileFound"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.FileSystem.FileEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.FileSystem.DirectoryScanner.OnDirectoryScanError(FlagLib.FileSystem.DirectoryScanErrorEventArgs)">
            <summary>
            Raises the <see cref="E:DirectoryScanError"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.FileSystem.DirectoryScanErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.FileSystem.DirectoryScanner.OnFinished(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Finished"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.FileSystem.DirectoryScanner.ScanDirectories(System.String)">
            <summary>
            Scans a directory recursively.
            </summary>
            <param name="rootPath">The root path.</param>
        </member>
        <member name="P:FlagLib.FileSystem.DirectoryScanner.FilesFound">
            <summary>
            Gets the scanned files.
            </summary>
            <value>The scanned files.</value>
        </member>
        <member name="P:FlagLib.FileSystem.DirectoryScanner.DirectoryPath">
            <summary>
            Gets the directory path.
            </summary>
            <value>The directory path.</value>
        </member>
        <member name="E:FlagLib.FileSystem.DirectoryScanner.FileFound">
            <summary>
            Occurs when a file has been found.
            </summary>
        </member>
        <member name="E:FlagLib.FileSystem.DirectoryScanner.DirectoryScanError">
            <summary>
            Occurs when a directory couldn't be accessed.
            </summary>
        </member>
        <member name="E:FlagLib.FileSystem.DirectoryScanner.Finished">
            <summary>
            Occurs when the search has finished.
            </summary>
        </member>
        <member name="T:FlagLib.Console.Drawing.Shape">
            <summary>
            Base class for rectangles, circles, etc...
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.Shape.#ctor(FlagLib.Measure.Position,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Drawing.Shape"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:FlagLib.Console.Drawing.Shape.Draw">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Drawing.Shape.ForeColor">
            <summary>
            Gets or sets the fore color.
            </summary>
            <value>The fore color.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Shape.BackColor">
            <summary>
            Gets or sets the back color.
            </summary>
            <value>The back color.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Shape.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Shape.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="T:FlagLib.Console.Controls.TextField">
            <summary>
            Provides a text field where the user can do an input
            </summary>
        </member>
        <member name="T:FlagLib.Console.Controls.IFocusable">
            <summary>
            Provides methods for focusable controls
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.IFocusable.Focus">
            <summary>
            Focuses the control and executes it's behaviour (e.g the selection of a menu or the input of a textfield)
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.IFocusable.Defocus">
            <summary>
            Defocuses the control and stopps it's behaviour.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.IFocusable.Focused">
            <summary>
            Gets a value indicating whether this <see cref="T:FlagLib.Console.Controls.IFocusable"/> is focused.
            </summary>
            <value>true if focused; otherwise, false.</value>
        </member>
        <member name="M:FlagLib.Console.Controls.TextField.Focus">
            <summary>
            Focuses the control and executes it's behaviour (e.g the selection of a menu or the input of a textfield)
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.TextField.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.TextField.OnInputEntered(System.EventArgs)">
            <summary>
            Raises the <see cref="E:InputEntered"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Console.Controls.TextField.ScanInput">
            <summary>
            Scans the input.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.TextField.ForegroundColor">
            <summary>
            Gets or sets the color of the foreground.
            </summary>
            <value>The color of the foreground.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.TextField.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.TextField.Input">
            <summary>
            Gets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.TextField.Length">
            <summary>
            Gets or sets the length of the text field.
            </summary>
            <value>The length of the text field.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.TextField.Focused">
            <summary>
            Gets a value indicating whether this <see cref="T:FlagLib.Console.Controls.IFocusable"/> is focused.
            </summary>
            <value>true if focused; otherwise, false.</value>
        </member>
        <member name="E:FlagLib.Console.Controls.TextField.InputEntered">
            <summary>
            Occurs when the input has been entered.
            </summary>
        </member>
        <member name="T:FlagLib.Console.Drawing.Line">
            <summary>
            Base class for lines (horizontal line and vertical line)
            </summary>
        </member>
        <member name="T:FlagLib.Console.Drawing.IArea">
            <summary>
            Represents the area of a shape
            </summary>
        </member>
        <member name="P:FlagLib.Console.Drawing.IArea.Area">
            <summary>
            Gets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="M:FlagLib.Console.Drawing.Line.#ctor(FlagLib.Measure.Position,System.Int32,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Drawing.Line"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="length">The lenght.</param>
            <param name="token">The token.</param>
        </member>
        <member name="P:FlagLib.Console.Drawing.Line.Length">
            <summary>
            Gets or sets the lenght.
            </summary>
            <value>The lenght.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Line.Area">
            <summary>
            Gets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="T:FlagLib.Collections.EventCollectionEventArgs`1">
            <summary>
            Provides a collection which raises events when items get added or removed
            </summary>
            <typeparam name="T">Type of the items</typeparam>
        </member>
        <member name="M:FlagLib.Collections.EventCollectionEventArgs`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> class.
            </summary>
            <param name="item">The item that was affected.</param>
            <param name="index">The index of the item which was affected.</param>
        </member>
        <member name="P:FlagLib.Collections.EventCollectionEventArgs`1.Item">
            <summary>
            Gets the item that was affected.
            </summary>
            <value>The item that was affected.</value>
        </member>
        <member name="P:FlagLib.Collections.EventCollectionEventArgs`1.Index">
            <summary>
            Gets the index of the item which was affected.
            </summary>
            <value>The index of the item which was affected.</value>
        </member>
        <member name="T:FlagLib.Collections.SerializableDictionary`2">
            <summary>
            Provides a serializable dictionary
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:FlagLib.Collections.SerializableDictionary`2.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:FlagLib.Collections.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:FlagLib.Console.Drawing.VerticalLine">
            <summary>
            Represents a vertical line
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.VerticalLine.Draw">
            <summary>
            Draws the line.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.VerticalLine.#ctor(FlagLib.Measure.Position,System.Int32,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Drawing.VerticalLine"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="length">The lenght.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:FlagLib.Console.Drawing.Rectangle.#ctor(FlagLib.Measure.Position,FlagLib.Measure.Size,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Drawing.Rectangle"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="size">The size.</param>
            <param name="token">The token.</param>
            <param name="filled">if set to <c>true</c>, the rectangle is filled.</param>
        </member>
        <member name="M:FlagLib.Console.Drawing.Rectangle.Draw">
            <summary>
            Draws this rectangle.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.Rectangle.DrawFilledRectangle">
            <summary>
            Draws a filled rectangle.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.Rectangle.DrawUnfilledRectangle">
            <summary>
            Draws a unfilled rectangle.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Drawing.Rectangle.Filled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlagLib.Console.Drawing.Rectangle"/> is filled.
            </summary>
            <value><c>true</c> if filled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Rectangle.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Rectangle.Area">
            <summary>
            Gets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="T:FlagLib.Console.Controls.Container">
            <summary>
            Base class for all containers
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Controls.Container"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.Update">
            <summary>
            Updates the container and it's child controls if visible is set to true.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.controls_BeforeListCleared(System.Object,System.EventArgs)">
            <summary>
            Handles the BeforeListCleared event of the controls control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.controls_ItemRemoved(System.Object,FlagLib.Collections.EventCollectionEventArgs{FlagLib.Console.Controls.Control})">
            <summary>
            Handles the ItemRemoved event of the controls control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:FlagLib.Collections.EventCollectionEventArgs&lt;FlagLib.Console.Controls.Control&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.controls_ItemAdded(System.Object,FlagLib.Collections.EventCollectionEventArgs{FlagLib.Console.Controls.Control})">
            <summary>
            Handles the ItemAdded event of the controls control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:FlagLib.Collections.EventCollectionEventArgs&lt;FlagLib.Console.Controls.Control&gt;"/> instance containing the event data.</param>
        </member>
        <member name="P:FlagLib.Console.Controls.Container.Controls">
            <summary>
            Gets the underlying controls.
            </summary>
            <value>The underlying controls.</value>
        </member>
        <member name="T:FlagLib.ValueConverters.BoolNegationValueConverter">
            <summary>
            Negates a boolean value
            </summary>
        </member>
        <member name="M:FlagLib.ValueConverters.BoolNegationValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:FlagLib.ValueConverters.BoolNegationValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:FlagLib.Collections.EventCollection`1">
            <summary>
            Represents a generic <see cref="T:FlagLib.Collections.EventCollection`1"/> which raises events when items are added and deleted
            </summary>
            <typeparam name="T">Type of the elements in the <see cref="T:FlagLib.Collections.EventCollection`1"/></typeparam>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollection`1"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollection`1"/> class.
            </summary>
            <param name="collection">The collection which gets copied into the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollection`1"/> class.
            </summary>
            <param name="capacity">The initial capacity of the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Add(`0)">
            <summary>
            Adds the specified item to the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the collection to the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <param name="collection">The collection to add.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:FlagLib.Collections.EventCollection`1"/> contains the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if the <see cref="T:FlagLib.Collections.EventCollection`1"/> contains the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item">The item to search.</param>
            <returns>The index of the specified item</returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True, if the item is successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:FlagLib.Collections.EventCollection`1"/> to the specified array, starting at the specified index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">Index of the <see cref="T:FlagLib.Collections.EventCollection`1"/> where the copy begins.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="!:EventList&lt;T&gt;"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator&lt;T&gt;"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlagLib.Collections.EventCollection`1.GetEnumerator" -->
        <member name="M:FlagLib.Collections.EventCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemAdded(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemAdded"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemAdding(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemAdding"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemRemoved(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemRemoved"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemRemoving(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemRemoving"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnListCleared(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ListCleared"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnListClearing(System.EventArgs)">
            <summary>
            Raises the <see cref="E:BeforeListCleared"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.Count">
            <summary>
            Gets the number of elements in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <value>The number of elements in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</value>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:FlagLib.Collections.EventCollection`1"/> is read only.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:FlagLib.Collections.EventCollection`1"/>e is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemAdded">
            <summary>
            Occurs when an item has been added.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemAdding">
            <summary>
            Occurs before the item has been item added.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemRemoved">
            <summary>
            Occurs when an item has been removed.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemRemoving">
            <summary>
            Occurs before the item has been removed.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ListCleared">
            <summary>
            Occurs when the list has been cleared.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ListClearing">
            <summary>
            Occurs before the list has been cleared.
            </summary>
        </member>
        <member name="T:FlagLib.Console.Controls.Menu`1">
            <summary>
            Provides a text-based menu in the console, where the user can select an item
            </summary>
            <typeparam name="T">Type of the item that the user can select</typeparam>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.Focus">
            <summary>
            Focuses the control and executes it's behaviour (e.g the selection of a menu or the input of a textfield)
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.Defocus">
            <summary>
            Defocuses the control and stopps it's behaviour.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.ScanInput">
            <summary>
            Scans the input (after the item got focused).
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.OnItemChosen(FlagLib.Console.Controls.MenuEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemChosen"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Console.Controls.MenuEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.OnSelectionChanged(FlagLib.Console.Controls.MenuEventArgs{`0})">
            <summary>
            Raises the <see cref="E:SelectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Console.Controls.MenuEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
            <value>The index of the selected.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.SelectedItem">
            <summary>
            Gets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.UpKey">
            <summary>
            Gets or sets up key.
            </summary>
            <value>Up key.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.DownKey">
            <summary>
            Gets or sets down key.
            </summary>
            <value>Down key.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.ForegroundColor">
            <summary>
            Gets or sets the color of the foreground.
            </summary>
            <value>The color of the foreground.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.SelectionBackgroundColor">
            <summary>
            Gets or sets the color of the selection background.
            </summary>
            <value>The color of the selection background.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.SelectionForegroundColor">
            <summary>
            Gets or sets the color of the selection foreground.
            </summary>
            <value>The color of the selection foreground.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.Focused">
            <summary>
            Gets a value indicating whether this <see cref="T:FlagLib.Console.Controls.IFocusable"/> is focused.
            </summary>
            <value>true if focused; otherwise, false.</value>
        </member>
        <member name="E:FlagLib.Console.Controls.Menu`1.ItemChosen">
            <summary>
            Occurs when a item has been chosen.
            </summary>
        </member>
        <member name="E:FlagLib.Console.Controls.Menu`1.SelectionChanged">
            <summary>
            Occurs when the selection has been changed.
            </summary>
        </member>
        <member name="T:FlagLib.Console.Controls.ListView`1">
            <summary>
            Provides a list view, that displays items in a table with one column
            </summary>
            <typeparam name="T">Type of the item that gets displayed</typeparam>
        </member>
        <member name="M:FlagLib.Console.Controls.ListView`1.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.ListView`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:FlagLib.FileSystem.FileEventArgs.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.FileSystem.FileEventArgs"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="P:FlagLib.FileSystem.FileEventArgs.File">
            <summary>
            Gets the file.
            </summary>
            <value>The file.</value>
        </member>
        <member name="T:FlagLib.Console.Controls.Panel">
            <summary>
            Provides a <see cref="T:FlagLib.Console.Controls.Panel"/> that can contain controls
            </summary>
        </member>
        <member name="T:FlagLib.Console.Drawing.HorizontalLine">
            <summary>
            Represents a horizontal line
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.HorizontalLine.Draw">
            <summary>
            Draws the line.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.HorizontalLine.#ctor(FlagLib.Measure.Position,System.Int32,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Drawing.HorizontalLine"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="length">The lenght.</param>
            <param name="token">The token.</param>
        </member>
        <member name="T:FlagLib.Measure.Position">
            <summary>
            Encapsulates a x and y coordinate
            </summary>
        </member>
        <member name="M:FlagLib.Measure.Position.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Measure.Position"/> class with the coordinates (0|0).
            </summary>
        </member>
        <member name="M:FlagLib.Measure.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Measure.Position"/> class.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="M:FlagLib.Measure.Position.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:FlagLib.Measure.Position.ToSystemDrawingPoint">
            <summary>
            Converts the <see cref="T:FlagLib.Measure.Position"/> to a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Point"/></returns>
        </member>
        <member name="M:FlagLib.Measure.Position.Add(FlagLib.Measure.Position)">
            <summary>
            Adds the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:FlagLib.Measure.Position.op_Addition(FlagLib.Measure.Position,FlagLib.Measure.Position)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="positionA">The position A.</param>
            <param name="positionB">The position B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlagLib.Measure.Position.op_Equality(FlagLib.Measure.Position,FlagLib.Measure.Position)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="positionA">The position A.</param>
            <param name="positionB">The position B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlagLib.Measure.Position.op_Inequality(FlagLib.Measure.Position,FlagLib.Measure.Position)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="positionA">The position A.</param>
            <param name="positionB">The position B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlagLib.Measure.Position.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:FlagLib.Measure.Position.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="P:FlagLib.Measure.Position.X">
            <summary>
            Gets or sets the x coordinate
            </summary>
        </member>
        <member name="P:FlagLib.Measure.Position.Y">
            <summary>
            Gets or sets the y coordinate
            </summary>
        </member>
        <member name="T:FlagLib.Console.Controls.Screen">
            <summary>
            Top container, equals the <see cref="!:System.Windows.Forms.Form"/> class. <para/>
            Every control and container should be placed here
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.Screen.AbsolutePosition">
            <summary>
            Gets the absolute position to the console.
            </summary>
            <value>The absolute position to the console.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Screen.Top">
            <summary>
            Gets the top control (the screen).
            </summary>
            <value>The top control.</value>
        </member>
        <member name="T:FlagLib.Console.Controls.MenuItem`1">
            <summary>
            An menu item for selection
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.MenuItem`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Controls.MenuItem`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:FlagLib.Console.Controls.MenuItem`1.Name">
            <summary>
            Gets or sets the name which is displays in the menu.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.MenuItem`1.Value">
            <summary>
            Value of the item, returned when the user selects an item
            </summary>
        </member>
    </members>
</doc>
