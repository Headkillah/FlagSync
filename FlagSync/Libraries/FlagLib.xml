<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlagLib</name>
    </assembly>
    <members>
        <member name="T:FlagLib.Console.Drawing.Shape">
            <summary>
            Base class for rectangles, lines, etc...
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.Shape.#ctor(FlagLib.Measure.Position,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Drawing.Shape"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:FlagLib.Console.Drawing.Shape.Draw">
            <summary>
            Draws the shape.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Drawing.Shape.ForegroundColor">
            <summary>
            Gets or sets the fore color.
            </summary>
            <value>The fore color.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Shape.BackgroundColor">
            <summary>
            Gets or sets the back color.
            </summary>
            <value>The back color.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Shape.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Shape.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="T:FlagLib.Console.Drawing.IArea">
            <summary>
            Represents the area of a shape
            </summary>
        </member>
        <member name="P:FlagLib.Console.Drawing.IArea.Area">
            <summary>
            Gets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="M:FlagLib.Console.Drawing.Rectangle.#ctor(FlagLib.Measure.Position,FlagLib.Measure.Size,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Drawing.Rectangle"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="size">The size.</param>
            <param name="token">The token.</param>
            <param name="filled">if set to <c>true</c>, the rectangle is filled.</param>
        </member>
        <member name="M:FlagLib.Console.Drawing.Rectangle.Draw">
            <summary>
            Draws this rectangle.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.Rectangle.DrawFilledRectangle">
            <summary>
            Draws a filled rectangle.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.Rectangle.DrawUnfilledRectangle">
            <summary>
            Draws a unfilled rectangle.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Drawing.Rectangle.IsFilled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlagLib.Console.Drawing.Rectangle"/> is filled.
            </summary>
            <value><c>true</c> if filled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Rectangle.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Rectangle.Area">
            <summary>
            Gets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="T:FlagLib.Console.Controls.MenuEventArgs`1">
            <summary>
            Provides data for the events that are raised by the <see cref="!:Menu"/> class
            </summary>
            <typeparam name="T">Type of the MenuItem</typeparam>
        </member>
        <member name="M:FlagLib.Console.Controls.MenuEventArgs`1.#ctor(FlagLib.Console.Controls.MenuItem{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Controls.MenuEventArgs`1"/> class.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="P:FlagLib.Console.Controls.MenuEventArgs`1.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="T:FlagLib.Console.Controls.Menu`1">
            <summary>
            Provides a text-based menu in the console, where the user can select an item
            </summary>
            <typeparam name="T">Type of the item that the user can select</typeparam>
        </member>
        <member name="T:FlagLib.Console.Controls.Control">
            <summary>
            Base class for all controls
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Control.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Controls.Control"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Control.Update">
            <summary>
            Updates the control if visible is set to true.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Control.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Control.Clear">
            <summary>
            Clears the control's area.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.Parent">
            <summary>
            Gets or sets the parent control.
            </summary>
            <value>The parent control.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.Top">
            <summary>
            Gets the top control (the screen).
            </summary>
            <value>The top control.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.RelativePosition">
            <summary>
            Gets or sets the relative position to the parent container.
            </summary>
            <value>The relative position to the parent container.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.AbsolutePosition">
            <summary>
            Gets the absolute position to the console.
            </summary>
            <value>The absolute position to the console.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.Size">
            <summary>
            Gets or sets the size of the control.
            </summary>
            <value>The size of the control.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Control.IsVisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FlagLib.Console.Controls.Control"/> is visible.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:FlagLib.Console.Controls.IFocusable">
            <summary>
            Provides methods for focusable controls
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.IFocusable.Focus">
            <summary>
            Focuses the control and executes it's behaviour (e.g the selection of a menu or the input of a textfield)
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.IFocusable.Defocus">
            <summary>
            Defocuses the control and stopps it's behaviour.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.IFocusable.IsFocused">
            <summary>
            Gets a value indicating whether this <see cref="T:FlagLib.Console.Controls.IFocusable"/> is focused.
            </summary>
            <value>true if focused; otherwise, false.</value>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Controls.Menu`1"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.Focus">
            <summary>
            Focuses the control and executes it's behaviour (e.g the selection of a menu or the input of a textfield)
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.Defocus">
            <summary>
            Defocuses the control and stopps it's behaviour.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.ScanInput">
            <summary>
            Scans the input (after the item got focused).
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.OnItemChosen(FlagLib.Console.Controls.MenuEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemChosen"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Console.Controls.MenuEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Console.Controls.Menu`1.OnSelectionChanged(FlagLib.Console.Controls.MenuEventArgs{`0})">
            <summary>
            Raises the <see cref="E:SelectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Console.Controls.MenuEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.SelectedIndex">
            <summary>
            Gets or sets the index of the selected.
            </summary>
            <value>The index of the selected.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.SelectedItem">
            <summary>
            Gets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.UpKey">
            <summary>
            Gets or sets up key.
            </summary>
            <value>Up key.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.DownKey">
            <summary>
            Gets or sets down key.
            </summary>
            <value>Down key.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.ForegroundColor">
            <summary>
            Gets or sets the color of the foreground.
            </summary>
            <value>The color of the foreground.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.SelectionBackgroundColor">
            <summary>
            Gets or sets the color of the selection background.
            </summary>
            <value>The color of the selection background.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.SelectionForegroundColor">
            <summary>
            Gets or sets the color of the selection foreground.
            </summary>
            <value>The color of the selection foreground.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Menu`1.IsFocused">
            <summary>
            Gets a value indicating whether this <see cref="T:FlagLib.Console.Controls.IFocusable"/> is focused.
            </summary>
            <value>true if focused; otherwise, false.</value>
        </member>
        <member name="E:FlagLib.Console.Controls.Menu`1.ItemChosen">
            <summary>
            Occurs when a item has been chosen.
            </summary>
        </member>
        <member name="E:FlagLib.Console.Controls.Menu`1.SelectionChanged">
            <summary>
            Occurs when the selection has been changed.
            </summary>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.Insert(System.Int32,`0)">
             <summary>
             Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
             </summary>
             <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
             <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.RemoveAt(System.Int32)">
             <summary>
             Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
             </summary>
             <param name="index">The zero-based index of the item to remove.</param>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="P:FlagLib.Collections.ThreadSafeObservableCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:FlagLib.Collections.ThreadSafeObservableCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="P:FlagLib.Collections.ThreadSafeObservableCollection`1.Item(System.Int32)">
             <summary>
             Gets or sets the element at the specified index.
             </summary>
             <returns>
             The element at the specified index.
               </returns>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="T:FlagLib.Collections.Grid`1">
            <summary>
            Provides a generic grid with rows and columns
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
        </member>
        <member name="M:FlagLib.Collections.Grid`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.Grid`1"/> class.
            </summary>
            <param name="rows">The row count.</param>
            <param name="columns">The column count.</param>
        </member>
        <member name="M:FlagLib.Collections.Grid`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.Grid`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:FlagLib.Collections.Grid`1.RowCount">
            <summary>
            Gets the total amount of rows.
            </summary>
            <value>
            The total amount of rows.
            </value>
        </member>
        <member name="P:FlagLib.Collections.Grid`1.ColumnCount">
            <summary>
            Gets the total amount of columns.
            </summary>
            <value>
            The total amount of columns.
            </value>
        </member>
        <member name="P:FlagLib.Collections.Grid`1.CellCount">
            <summary>
            Gets the total amount of cells.
            </summary>
            <value>
            The total amount of cells.
            </value>
        </member>
        <member name="P:FlagLib.Collections.Grid`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified row and column.
            </summary>
        </member>
        <member name="P:FlagLib.Collections.Grid`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="T:FlagLib.Console.Controls.TextField">
            <summary>
            Provides a text field where the user can do an input
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.TextField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Controls.TextField"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.TextField.Focus">
            <summary>
            Focuses the control and executes it's behaviour (e.g the selection of a menu or the input of a textfield)
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.TextField.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.TextField.OnInputEntered(System.EventArgs)">
            <summary>
            Raises the <see cref="E:InputEntered"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Console.Controls.TextField.ScanInput">
            <summary>
            Scans the input.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.TextField.ForegroundColor">
            <summary>
            Gets or sets the color of the foreground.
            </summary>
            <value>The color of the foreground.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.TextField.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.TextField.Input">
            <summary>
            Gets the input.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.TextField.Length">
            <summary>
            Gets or sets the length of the text field.
            </summary>
            <value>The length of the text field.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.TextField.IsFocused">
            <summary>
            Gets a value indicating whether this <see cref="T:FlagLib.Console.Controls.IFocusable"/> is focused.
            </summary>
            <value>true if focused; otherwise, false.</value>
        </member>
        <member name="E:FlagLib.Console.Controls.TextField.InputEntered">
            <summary>
            Occurs when the input has been entered.
            </summary>
        </member>
        <member name="T:FlagLib.ValueConverters.CombiningConverter">
            <summary>
            Combines to converters
            </summary>
        </member>
        <member name="M:FlagLib.ValueConverters.CombiningConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:FlagLib.ValueConverters.CombiningConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanErrorEventArgs.#ctor(System.String,FlagLib.IO.DirectoryScanErrorEventArgs.DirectoryScanErrorType)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.DirectoryScanErrorEventArgs"/> class.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="errorType">Type of the error.</param>
        </member>
        <member name="P:FlagLib.IO.DirectoryScanErrorEventArgs.ErrorType">
            <summary>
            Gets the type of the error.
            </summary>
            <value>
            The type of the error.
            </value>
        </member>
        <member name="P:FlagLib.IO.DirectoryScanErrorEventArgs.DirectoryPath">
            <summary>
            Gets the directory path.
            </summary>
            <value>
            The directory path.
            </value>
        </member>
        <member name="M:FlagLib.Extensions.ClassExtensions.ThrowIfIsNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the object is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The object.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="T:FlagLib.Console.Drawing.Line">
            <summary>
            Base class for lines (horizontal line and vertical line)
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.Line.#ctor(FlagLib.Measure.Position,System.Int32,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Drawing.Line"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="length">The lenght.</param>
            <param name="token">The token.</param>
        </member>
        <member name="P:FlagLib.Console.Drawing.Line.Length">
            <summary>
            Gets or sets the lenght.
            </summary>
            <value>The lenght.</value>
        </member>
        <member name="P:FlagLib.Console.Drawing.Line.Area">
            <summary>
            Gets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="T:FlagLib.Console.Controls.ListView`1">
            <summary>
            Provides a list view, that displays items in a table with one column
            </summary>
            <typeparam name="T">Type of the item that gets displayed</typeparam>
        </member>
        <member name="M:FlagLib.Console.Controls.ListView`1.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.ListView`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:FlagLib.IO.FileEventArgs.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.FileEventArgs"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="P:FlagLib.IO.FileEventArgs.File">
            <summary>
            Gets the file.
            </summary>
            <value>
            The file.
            </value>
        </member>
        <member name="T:FlagLib.Measure.Position">
            <summary>
            Provides a mutable Position, which encapsulates a x and y coordinate
            </summary>
        </member>
        <member name="M:FlagLib.Measure.Position.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Measure.Position"/> class with the coordinates (0|0).
            </summary>
        </member>
        <member name="M:FlagLib.Measure.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Measure.Position"/> class.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
        </member>
        <member name="M:FlagLib.Measure.Position.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:FlagLib.Measure.Position.ToSystemDrawingPoint">
            <summary>
            Converts the <see cref="T:FlagLib.Measure.Position"/> to a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Point"/></returns>
        </member>
        <member name="M:FlagLib.Measure.Position.Add(FlagLib.Measure.Position)">
            <summary>
            Adds the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns></returns>
        </member>
        <member name="M:FlagLib.Measure.Position.op_Addition(FlagLib.Measure.Position,FlagLib.Measure.Position)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="positionA">The position A.</param>
            <param name="positionB">The position B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlagLib.Measure.Position.op_Equality(FlagLib.Measure.Position,FlagLib.Measure.Position)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="positionA">The position A.</param>
            <param name="positionB">The position B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlagLib.Measure.Position.op_Inequality(FlagLib.Measure.Position,FlagLib.Measure.Position)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="positionA">The position A.</param>
            <param name="positionB">The position B.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:FlagLib.Measure.Position.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:FlagLib.Measure.Position.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="P:FlagLib.Measure.Position.X">
            <summary>
            Gets or sets the x coordinate
            </summary>
        </member>
        <member name="P:FlagLib.Measure.Position.Y">
            <summary>
            Gets or sets the y coordinate
            </summary>
        </member>
        <member name="T:FlagLib.Console.Drawing.VerticalLine">
            <summary>
            Represents a vertical line
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.VerticalLine.Draw">
            <summary>
            Draws the line.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.VerticalLine.#ctor(FlagLib.Measure.Position,System.Int32,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Drawing.VerticalLine"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="length">The lenght.</param>
            <param name="token">The token.</param>
        </member>
        <member name="T:FlagLib.Console.Controls.Panel">
            <summary>
            Provides a <see cref="T:FlagLib.Console.Controls.Panel"/> that can contain controls
            </summary>
        </member>
        <member name="T:FlagLib.Console.Controls.Container">
            <summary>
            Base class for all containers
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Controls.Container"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.Update">
            <summary>
            Updates the container and it's child controls if visible is set to true.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.controls_BeforeListCleared(System.Object,System.EventArgs)">
            <summary>
            Handles the BeforeListCleared event of the controls control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.controls_ItemRemoved(System.Object,FlagLib.Collections.EventCollectionEventArgs{FlagLib.Console.Controls.Control})">
            <summary>
            Handles the ItemRemoved event of the controls control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:FlagLib.Collections.EventCollectionEventArgs&lt;FlagLib.Console.Controls.Control&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Console.Controls.Container.controls_ItemAdded(System.Object,FlagLib.Collections.EventCollectionEventArgs{FlagLib.Console.Controls.Control})">
            <summary>
            Handles the ItemAdded event of the controls control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:FlagLib.Collections.EventCollectionEventArgs&lt;FlagLib.Console.Controls.Control&gt;"/> instance containing the event data.</param>
        </member>
        <member name="P:FlagLib.Console.Controls.Container.Controls">
            <summary>
            Gets the underlying controls.
            </summary>
            <value>The underlying controls.</value>
        </member>
        <member name="M:FlagLib.Console.Controls.Panel.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="T:FlagLib.Console.Controls.MenuItem`1">
            <summary>
            An menu item for selection
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.MenuItem`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Controls.MenuItem`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:FlagLib.Console.Controls.MenuItem`1.Name">
            <summary>
            Gets or sets the name which is displayed in the menu.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.MenuItem`1.Value">
            <summary>
            Value of the item, returned when the user selects an item
            </summary>
        </member>
        <member name="T:FlagLib.Collections.EventCollection`1">
            <summary>
            Represents a generic <see cref="T:FlagLib.Collections.EventCollection`1"/> which raises events when items are added and deleted
            </summary>
            <typeparam name="T">Type of the elements in the <see cref="T:FlagLib.Collections.EventCollection`1"/></typeparam>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollection`1"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollection`1"/> class.
            </summary>
            <param name="collection">The collection which gets copied into the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollection`1"/> class.
            </summary>
            <param name="capacity">The initial capacity of the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Add(`0)">
            <summary>
            Adds the specified item to the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the collection to the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <param name="collection">The collection to add.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Clear">
            <summary>
            Removes all elements from the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:FlagLib.Collections.EventCollection`1"/> contains the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the <see cref="T:FlagLib.Collections.EventCollection`1"/> contains the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item">The item to search.</param>
            <returns>
            The index of the specified item
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>
            True, if the item is successfully removed; otherwise, false.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:FlagLib.Collections.EventCollection`1"/> to the specified array, starting at the specified index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">Index of the <see cref="T:FlagLib.Collections.EventCollection`1"/> where the copy begins.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="!:EventList&lt;T&gt;"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator&lt;T&gt;"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemAdded(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemAdded"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemAdding(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemAdding"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemRemoved(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemRemoved"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemRemoving(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemRemoving"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnListCleared(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ListCleared"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnListClearing(System.EventArgs)">
            <summary>
            Raises the <see cref="E:BeforeListCleared"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.Count">
            <summary>
            Gets the number of elements in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <value>
            The number of elements in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <value>
            The capacity.
            </value>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemAdded">
            <summary>
            Occurs when an item has been added.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemAdding">
            <summary>
            Occurs before the item has been item added.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemRemoved">
            <summary>
            Occurs when an item has been removed.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemRemoving">
            <summary>
            Occurs before the item has been removed.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ListCleared">
            <summary>
            Occurs when the list has been cleared.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ListClearing">
            <summary>
            Occurs before the list has been cleared.
            </summary>
        </member>
        <member name="M:FlagLib.Reflection.ReflectionUtilities.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the name of a member which is passed via the expression.
            </summary>
            <typeparam name="T">Type of the member.</typeparam>
            <param name="expression">The expression which contains the member.</param>
            <returns>The members name.</returns>
        </member>
        <member name="F:FlagLib.IO.FileCopyOperation.CallbackChunkFinished">
            <summary>
            Callback reason passed as dwCallbackReason in CopyProgressRoutine.
            Indicates another part of the data file was copied.
            </summary>
        </member>
        <member name="F:FlagLib.IO.FileCopyOperation.CallbackStreamSwitch">
            <summary>
            Callback reason passed as dwCallbackReason in CopyProgressRoutine.
            Indicates another stream was created and is about to be copied. This is the callback reason given when the callback routine is first invoked.
            </summary>
        </member>
        <member name="F:FlagLib.IO.FileCopyOperation.ProgressContinue">
            <summary>
            Return value of the CopyProgressRoutine.
            Indicates continue the copy operation.
            </summary>
        </member>
        <member name="F:FlagLib.IO.FileCopyOperation.ProgressCancel">
            <summary>
            Return value of the CopyProgressRoutine.
            Indicates cancel the copy operation and delete the destination file.
            </summary>
        </member>
        <member name="F:FlagLib.IO.FileCopyOperation.ProgressStop">
            <summary>
            Return value of the CopyProgressRoutine.
            Indicates stop the copy operation. It can be restarted at a later time.
            </summary>
        </member>
        <member name="F:FlagLib.IO.FileCopyOperation.ProgressQuiet">
            <summary>
            Return value of the CopyProgressRoutine.
            Indicates continue the copy operation, but stop invoking CopyProgressRoutine to report progress.
            </summary>
        </member>
        <member name="M:FlagLib.IO.FileCopyOperation.CopyProgressCallback(System.Int64,System.Int64,System.Int64,System.Int64,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The CopyProgressRoutine delegate is an application-defined callback function used with the CopyFileEx and MoveFileWithProgress functions.
            It is called when a portion of a copy or move operation is completed.
            </summary>
            <param name="totalFileSize">Total size of the file, in bytes.</param>
            <param name="totalBytesTransferred">Total number of bytes transferred from the source file to the destination file since the copy operation began.</param>
            <param name="streamSize">Total size of the current file stream, in bytes.</param>
            <param name="streamBytesTransferred">Total number of bytes in the current stream that have been transferred from the source file to the destination file since the copy operation began.</param>
            <param name="dwStreamNumber">Handle to the current stream. The first time CopyProgressRoutine is called, the stream number is 1.</param>
            <param name="dwCallbackReason">Reason that CopyProgressRoutine was called.</param>
            <param name="hSourceFile">Handle to the source file.</param>
            <param name="hDestinationFile">Handle to the destination file.</param>
            <param name="lpData">Argument passed to CopyProgressRoutine by the CopyFileEx or MoveFileWithProgress function.</param>
            <returns>
            A value indicating how to proceed with the copy operation.
            </returns>
        </member>
        <member name="M:FlagLib.IO.FileCopyOperation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.FileCopyOperation"/> class.
            </summary>
            <param name="sourceFile">The source file.</param>
            <param name="targetFile">The target file.</param>
        </member>
        <member name="M:FlagLib.IO.FileCopyOperation.Execute">
            <summary>
            Executes the file copy operation.
            </summary>
        </member>
        <member name="M:FlagLib.IO.FileCopyOperation.OnCopyProgress(FlagLib.IO.CopyProgressEventArgs)">
            <summary>
            Raises the <see cref="E:CopyProgress"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.IO.CopyProgressEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:FlagLib.IO.FileCopyOperation.SourceFile">
            <summary>
            Gets the source file.
            </summary>
        </member>
        <member name="P:FlagLib.IO.FileCopyOperation.TargetFile">
            <summary>
            Gets the target file.
            </summary>
        </member>
        <member name="E:FlagLib.IO.FileCopyOperation.CopyProgressChanged">
            <summary>
            Occurs when the copy progress has changed.
            </summary>
        </member>
        <member name="T:FlagLib.IO.FileCopyOperation.CopyProgressRoutine">
            <summary>
            The CopyProgressRoutine delegate is an application-defined callback function used with the CopyFileEx and MoveFileWithProgress functions.
            It is called when a portion of a copy or move operation is completed.
            </summary>
            <param name="totalFileSize">Total size of the file.</param>
            <param name="totalBytesTransferred">The total bytes transferred.</param>
            <param name="streamSize">Size of the stream.</param>
            <param name="streamBytesTransferred">The stream bytes transferred.</param>
            <param name="dwStreamNumber">The stream number.</param>
            <param name="dwCallbackReason">The callback reason.</param>
            <param name="hSourceFile">The source file.</param>
            <param name="hDestinationFile">The destination file.</param>
            <param name="lpData">The data.</param>
            <returns></returns>
        </member>
        <member name="T:FlagLib.ValueConverters.BoolNegationValueConverter">
            <summary>
            Negates a boolean value
            </summary>
        </member>
        <member name="M:FlagLib.ValueConverters.BoolNegationValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:FlagLib.ValueConverters.BoolNegationValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:FlagLib.Serialization.GenericXmlSerializer">
            <summary>
            Provides a static and generic xml serializer to serialize collections an single objects
            </summary>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.SerializeCollection``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Serializes the specified collection at the specified path.
            </summary>
            <typeparam name="T">Type of the items to serialize</typeparam>
            <param name="collection">The items tho serialize.</param>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.SerializeItem``1(``0,System.String)">
            <summary>
            Serializes the specified item to the specified path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item to serialize.</param>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.DeserializeCollection``1(System.String)">
            <summary>
            Deserializes the collection from the specified path.
            </summary>
            <typeparam name="T">The type of the serialized items</typeparam>
            <param name="path">The path of the file.</param>
            <returns>
            The deserialized collection.
            </returns>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.DeserializeItem``1(System.String)">
            <summary>
            Deserializes the item at the specified path.
            </summary>
            <typeparam name="T">The type of the serialized item</typeparam>
            <param name="path">The path of the file.</param>
            <returns>
            The deserialized item.
            </returns>
        </member>
        <member name="M:FlagLib.Extensions.IntegerExtensions.ThrowIfIsGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the value is greater than the limit.
            </summary>
            <param name="value">The value.</param>
            <param name="limit">The limit.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="M:FlagLib.Extensions.IntegerExtensions.ThrowIfIsLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the value is less than the limit.
            </summary>
            <param name="value">The value.</param>
            <param name="limit">The limit.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="T:FlagLib.Console.Controls.Label">
            <summary>
            Represents a label that can show a text
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Label.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.Label.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:FlagLib.Collections.EventCollectionEventArgs`1">
            <summary>
            Provides a collection which raises events when items get added or removed
            </summary>
            <typeparam name="T">Type of the items</typeparam>
        </member>
        <member name="M:FlagLib.Collections.EventCollectionEventArgs`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> class.
            </summary>
            <param name="item">The item that was affected.</param>
            <param name="index">The index of the item which was affected.</param>
        </member>
        <member name="P:FlagLib.Collections.EventCollectionEventArgs`1.Item">
            <summary>
            Gets the item that was affected.
            </summary>
            <value>
            The item that was affected.
            </value>
        </member>
        <member name="P:FlagLib.Collections.EventCollectionEventArgs`1.Index">
            <summary>
            Gets the index of the item which was affected.
            </summary>
            <value>
            The index of the item which was affected.
            </value>
        </member>
        <member name="M:FlagLib.IO.DirectoryEventArgs.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.DirectoryEventArgs"/> class.
            </summary>
            <param name="directory">The found directory.</param>
        </member>
        <member name="P:FlagLib.IO.DirectoryEventArgs.Directory">
            <summary>
            Gets the found the directory.
            </summary>
            <value>
            The found directory.
            </value>
        </member>
        <member name="T:FlagLib.Console.Drawing.HorizontalLine">
            <summary>
            Represents a horizontal line
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.HorizontalLine.Draw">
            <summary>
            Draws the line.
            </summary>
        </member>
        <member name="M:FlagLib.Console.Drawing.HorizontalLine.#ctor(FlagLib.Measure.Position,System.Int32,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Console.Drawing.HorizontalLine"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="length">The lenght.</param>
            <param name="token">The token.</param>
        </member>
        <member name="T:FlagLib.Patterns.ViewModelBase`1">
            <summary>
            Provides an abstract and generic view model base class, <para/>
            which implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
            </summary>
            <typeparam name="T">Type of the concrete view model</typeparam>
        </member>
        <member name="M:FlagLib.Patterns.ViewModelBase`1.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Called when a property has changed.
            </summary>
            <typeparam name="TValue">The type of the property.</typeparam>
            <param name="propertySelector">The property selector.</param>
        </member>
        <member name="E:FlagLib.Patterns.ViewModelBase`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FlagLib.IO.StreamCopyOperation.#ctor(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)" -->
        <member name="M:FlagLib.IO.StreamCopyOperation.#ctor(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.StreamCopyOperation"/> class.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="targetStream">The target stream.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="dynamicUpdateInterval">if set to true, the operation uses an dynamic update interval, based on the stream length.;
            otherwise, it uses a predefined update interval</param>
        </member>
        <member name="M:FlagLib.IO.StreamCopyOperation.#ctor(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Prevents a default instance of the <see cref="T:FlagLib.IO.StreamCopyOperation"/> class from being created.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="targetStream">The target stream.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:FlagLib.IO.StreamCopyOperation.Execute">
            <summary>
            Executes the stream copy operation.
            </summary>
        </member>
        <member name="M:FlagLib.IO.StreamCopyOperation.OnCopyProgressChanged(FlagLib.IO.CopyProgressEventArgs)">
            <summary>
            Raises the <see cref="E:CopyProgressChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.IO.CopyProgressEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:FlagLib.IO.StreamCopyOperation.CopyProgressChanged">
            <summary>
            Occurs when copy progress has changed.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.AverageSpeed">
            <summary>
            Gets the average speed in bytes per second.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.BufferSize">
            <summary>
            Gets the size of the buffer in bytes.
            </summary>
            <value>
            The size of the buffer in bytes.
            </value>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.UpdateInterval">
            <summary>
            Gets the interval, after how much copied bytes the <see cref="!:CopyProgressChaned"/> shall be raised.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.EndTime">
            <summary>
            Gets the end time.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.SourceStream">
            <summary>
            Gets the source stream.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.TargetStream">
            <summary>
            Gets the target stream.
            </summary>
        </member>
        <member name="T:FlagLib.Measure.Size">
            <summary>
            Provides a mutable size, which encapsulates a width and a lenght
            </summary>
        </member>
        <member name="M:FlagLib.Measure.Size.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Measure.Size"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Measure.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Measure.Size"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:FlagLib.Measure.Size.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:FlagLib.Measure.Size.ToSystemDrawingSize">
            <summary>
            Converts the <see cref="T:FlagLib.Measure.Size"/> to a <see cref="T:System.Drawing.Size"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Size"/></returns>
        </member>
        <member name="M:FlagLib.Measure.Size.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:FlagLib.Measure.Size.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="P:FlagLib.Measure.Size.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:FlagLib.Measure.Size.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:FlagLib.IO.DirectoryScanner">
            <summary>
            Provides a directoy scanner to scan a directory recursively for files
            </summary>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.DirectoryScanner"/> class.
            </summary>
            <param name="path">The path of the directory to search.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.Start">
            <summary>
            Starts the directory scanner.
            </summary>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.Stop">
            <summary>
            Stops the directory scanner.
            </summary>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.OnFileFound(FlagLib.IO.FileEventArgs)">
            <summary>
            Raises the <see cref="E:FileFound"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.IO.FileEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.OnDirectoryFound(FlagLib.IO.DirectoryEventArgs)">
            <summary>
            Raises the <see cref="E:DirectoryFound"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.IO.DirectoryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.OnDirectoryScanError(FlagLib.IO.DirectoryScanErrorEventArgs)">
            <summary>
            Raises the <see cref="E:DirectoryScanError"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.IO.DirectoryScanErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.OnFinished(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Finished"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.OnDirectoryProceeded(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DirectoryProceeded"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.ScanDirectories(System.String)">
            <summary>
            Scans a directory recursively.
            </summary>
            <param name="rootPath">The root path.</param>
        </member>
        <member name="P:FlagLib.IO.DirectoryScanner.FilesFound">
            <summary>
            Gets the scanned files.
            </summary>
            <value>
            The scanned files.
            </value>
        </member>
        <member name="P:FlagLib.IO.DirectoryScanner.DirectoryPath">
            <summary>
            Gets the directory path.
            </summary>
            <value>
            The directory path.
            </value>
        </member>
        <member name="P:FlagLib.IO.DirectoryScanner.IsStopped">
            <summary>
            Gets or sets a value indicating whether the scanner is stopped.
            </summary>
            <value>
            true if the scanner is stopped; otherwise, false.
            </value>
        </member>
        <member name="E:FlagLib.IO.DirectoryScanner.FileFound">
            <summary>
            Occurs when a file has been found.
            </summary>
        </member>
        <member name="E:FlagLib.IO.DirectoryScanner.DirectoryFound">
            <summary>
            Occurs when a directory has been found.
            </summary>
        </member>
        <member name="E:FlagLib.IO.DirectoryScanner.DirectoryScanError">
            <summary>
            Occurs when a directory couldn't be accessed.
            </summary>
        </member>
        <member name="E:FlagLib.IO.DirectoryScanner.DirectoryProceeded">
            <summary>
            Occurs when a directory has been proceeded.
            </summary>
        </member>
        <member name="E:FlagLib.IO.DirectoryScanner.Finished">
            <summary>
            Occurs when the search has finished.
            </summary>
        </member>
        <member name="T:FlagLib.IO.CopyProgressEventArgs">
            <summary>
            Provides data for the CopyProgress event.
            </summary>
        </member>
        <member name="M:FlagLib.IO.CopyProgressEventArgs.#ctor(System.Int64,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.CopyProgressEventArgs"/> class.
            </summary>
            <param name="totalBytes">The total bytes.</param>
            <param name="copiedBytes">The total copied bytes.</param>
        </member>
        <member name="P:FlagLib.IO.CopyProgressEventArgs.TotalBytes">
            <summary>
            Gets the total byte number.
            </summary>
        </member>
        <member name="P:FlagLib.IO.CopyProgressEventArgs.TotalCopiedBytes">
            <summary>
            Gets the total copied bytes.
            </summary>
        </member>
        <member name="P:FlagLib.IO.CopyProgressEventArgs.AverageSpeed">
            <summary>
            Gets the average speed.
            </summary>
        </member>
        <member name="P:FlagLib.IO.CopyProgressEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation should be canceled.
            </summary>
            <value>
            true if the operation should be canceled; otherwise, false.
            </value>
        </member>
        <member name="T:FlagLib.Extensions.EnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:FlagLib.Extensions.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Determines whether the specified
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            contains any of the specified items
            </summary>
            <typeparam name="T">The source type</typeparam>
            <param name="value">The value.</param>
            <param name="items">The items.</param>
            <returns>
            	<c>true</c> if the specified value contains any of the specified items; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FlagLib.Extensions.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            contains any of the specified items
            </summary>
            <typeparam name="T">The source type</typeparam>
            <param name="value">The value.</param>
            <param name="items">The items.</param>
            <returns>
            	<c>true</c> if the specified value contains any of the specified items; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FlagLib.Console.Controls.Screen">
            <summary>
            Top container, equals the <see cref="!:System.Windows.Forms.Form"/> class. <para/>
            Every control and container should be placed here
            </summary>
        </member>
        <member name="M:FlagLib.Console.Controls.Screen.Draw">
            <summary>
            Draws the control.
            </summary>
        </member>
        <member name="P:FlagLib.Console.Controls.Screen.AbsolutePosition">
            <summary>
            Gets the absolute position to the console.
            </summary>
            <value>The absolute position to the console.</value>
        </member>
        <member name="P:FlagLib.Console.Controls.Screen.Top">
            <summary>
            Gets the top control (the screen).
            </summary>
            <value>The top control.</value>
        </member>
        <member name="T:FlagLib.Collections.SerializableDictionary`2">
            <summary>
            Provides a serializable dictionary
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:FlagLib.Collections.SerializableDictionary`2.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:FlagLib.Collections.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
    </members>
</doc>
