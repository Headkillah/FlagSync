<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlagLib</name>
    </assembly>
    <members>
        <member name="T:FlagLib.Patterns.MVVM.RelayCommand">
            <summary>
            Represents an <see cref="T:System.Windows.Input.ICommand"/> which takes
            a <see cref="T:System.Action"/> as Execute method and a <see cref="T:System.Predicate`1"/>
            as CanExecute method.
            </summary>
        </member>
        <member name="M:FlagLib.Patterns.MVVM.RelayCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Patterns.MVVM.RelayCommand"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
        </member>
        <member name="M:FlagLib.Patterns.MVVM.RelayCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Patterns.MVVM.RelayCommand"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The predicated, which indicates if the command can execute.</param>
        </member>
        <member name="M:FlagLib.Patterns.MVVM.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:FlagLib.Patterns.MVVM.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:FlagLib.Patterns.MVVM.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:FlagLib.Collections.ThreadSafeObservableCollection`1">
            <summary>
            Provides a thread save observable collection.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.</typeparam>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.Insert(System.Int32,`0)">
             <summary>
             Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
             </summary>
             <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
             <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.RemoveAt(System.Int32)">
             <summary>
             Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
             </summary>
             <param name="index">The zero-based index of the item to remove.</param>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.InternAdd(`0)">
            <summary>
            Executes the intern Add method.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.InternClear">
            <summary>
            Executes the intern Clear method.
            </summary>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.InternRemove(`0)">
            <summary>
            Executes the intern Remove method
            </summary>
            <param name="item">The item to remove.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.InternInsert(System.Int32,`0)">
            <summary>
            Executes the intern Insert method.
            </summary>
            <param name="index">The index to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:FlagLib.Collections.ThreadSafeObservableCollection`1.InternRemoveAt(System.Int32)">
            <summary>
            Executes the intern RemoveAt method.
            </summary>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="E:FlagLib.Collections.ThreadSafeObservableCollection`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="P:FlagLib.Collections.ThreadSafeObservableCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/>.
              </returns>
        </member>
        <member name="P:FlagLib.Collections.ThreadSafeObservableCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:FlagLib.Collections.ThreadSafeObservableCollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="P:FlagLib.Collections.ThreadSafeObservableCollection`1.Item(System.Int32)">
             <summary>
             Gets or sets the element at the specified index.
             </summary>
             <returns>
             The element at the specified index.
               </returns>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="T:FlagLib.Collections.Grid`1">
            <summary>
            Provides a generic grid with rows and columns.
            </summary>
            <typeparam name="T">The type of the items in the <see cref="T:FlagLib.Collections.Grid`1"/>.</typeparam>
        </member>
        <member name="M:FlagLib.Collections.Grid`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.Grid`1"/> class.
            </summary>
            <param name="columns">The number of columns.</param>
            <param name="rows">The number of rows.</param>
        </member>
        <member name="M:FlagLib.Collections.Grid`1.Traverse(System.Action{System.Int32,System.Int32})">
            <summary>
            Traverses each row of the grid item per item from the origin and executes the specified action.
            </summary>
            <param name="action">
            The action to execute, the first argument is the current column,
            the second argument is the current row.
            </param>
        </member>
        <member name="M:FlagLib.Collections.Grid`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.Grid`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:FlagLib.Collections.Grid`1.Rows">
            <summary>
            Gets the number of rows.
            </summary>
        </member>
        <member name="P:FlagLib.Collections.Grid`1.Columns">
            <summary>
            Gets the number of columns.
            </summary>
        </member>
        <member name="P:FlagLib.Collections.Grid`1.CellCount">
            <summary>
            Gets the number of cells.
            </summary>
        </member>
        <member name="P:FlagLib.Collections.Grid`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the element at the specified column and row.
            </summary>
        </member>
        <member name="P:FlagLib.Collections.Grid`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="T:FlagLib.Reflection.Reflector">
            <summary>
            Provides methods for reflection.
            </summary>
        </member>
        <member name="M:FlagLib.Reflection.Reflector.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the name of the member that is passed via the expression.
            </summary>
            <typeparam name="T">The type of the member.</typeparam>
            <param name="expression">The expression which contains the member.</param>
            <returns>
            The members name.
            </returns>
            <example>
            The method can be used as following:
              <code>
            int myMember = 0;
            string name = Reflector.GetMembername(() =&gt; myMember);
            Console.Write(name); // Output: myMember
              </code>
              </example>
        </member>
        <member name="T:FlagLib.IO.DataTransferEventArgs">
            <summary>
            Encapsulates informations of a data transfer.
            </summary>
        </member>
        <member name="M:FlagLib.IO.DataTransferEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.DataTransferEventArgs"/> class.
            </summary>
            <param name="totalBytes">The total number of bytes.</param>
            <param name="transferredBytes">The transferred bytes.</param>
        </member>
        <member name="P:FlagLib.IO.DataTransferEventArgs.TotalBytes">
            <summary>
            Gets the total number of bytes.
            </summary>
        </member>
        <member name="P:FlagLib.IO.DataTransferEventArgs.TransferredBytes">
            <summary>
            Gets the number of copied bytes.
            </summary>
        </member>
        <member name="P:FlagLib.IO.DataTransferEventArgs.AverageSpeed">
            <summary>
            Gets the average speed in bytes per second.
            </summary>
        </member>
        <member name="P:FlagLib.IO.DataTransferEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation should be canceled.
            </summary>
            <value>
            true if the operation should be canceled; otherwise, false.
            </value>
            <remarks>
            Note that the caller of this class is responsible for the implementation cancelable
            data transfer and the set of this property may not work as expected.
            </remarks>
        </member>
        <member name="T:FlagLib.IO.DataTransferEventArgs`2">
            <summary>
            Encapsulates informations of a data transfer.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
        </member>
        <member name="M:FlagLib.IO.DataTransferEventArgs`2.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.DataTransferEventArgs"/> class.
            </summary>
            <param name="totalBytes">The total number of bytes.</param>
            <param name="transferredBytes">The transferred bytes.</param>
        </member>
        <member name="P:FlagLib.IO.DataTransferEventArgs`2.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:FlagLib.IO.DataTransferEventArgs`2.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>
            The destination.
            </value>
        </member>
        <member name="T:FlagLib.IO.DirectoryScanErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:FlagLib.IO.DirectoryScanner.DirectoryScanError"/> event.
            </summary>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanErrorEventArgs.#ctor(System.String,FlagLib.IO.DirectoryScanErrorType)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.DirectoryScanErrorEventArgs"/> class.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="errorType">Type of the error.</param>
        </member>
        <member name="P:FlagLib.IO.DirectoryScanErrorEventArgs.ErrorType">
            <summary>
            Gets the type of the error.
            </summary>
            <value>
            The type of the error.
            </value>
        </member>
        <member name="P:FlagLib.IO.DirectoryScanErrorEventArgs.DirectoryPath">
            <summary>
            Gets the directory path.
            </summary>
            <value>
            The directory path.
            </value>
        </member>
        <member name="T:FlagLib.Extensions.LongExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Int64"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Extensions.LongExtensions.ToSizeString(System.Int64)">
            <summary>
            Formats the value to a string, which has the appropriate size-suffix.
            </summary>
            <param name="size">The value.</param>
            <returns>
            A formatted string with the appropriate size-suffix.
            </returns>
            <remarks>
            The formatting is based on 1024-byte splitting.
            This means, that the suffix changes every power of 1024,
            till 1024^12 (Terabyte).
            </remarks>
            <example>
            For a value of 1, the result string is "1 B".
            For a value of 1024, the result string is "1 KB".
            </example>
        </member>
        <member name="T:FlagLib.Patterns.MVVM.ViewModelBase`1">
            <summary>
            Provides an abstract and generic view model base class, which
            implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
            <typeparam name="T">Type of the concrete view model.</typeparam>
        </member>
        <member name="M:FlagLib.Patterns.MVVM.ViewModelBase`1.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Called when a property has changed.
            </summary>
            <typeparam name="TValue">The type of the property.</typeparam>
            <param name="propertySelector">The property selector.</param>
        </member>
        <member name="E:FlagLib.Patterns.MVVM.ViewModelBase`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:FlagLib.IO.DirectoryScanErrorType">
            <summary>
            Specifies which error occured during the directory scan.
            </summary>
        </member>
        <member name="T:FlagLib.Extensions.ClassExtensions">
            <summary>
            Provides generic extension methods.
            </summary>
        </member>
        <member name="M:FlagLib.Extensions.ClassExtensions.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the object is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The object to check.</param>
            <param name="parameterName">The parameter name.</param>
        </member>
        <member name="M:FlagLib.Extensions.ClassExtensions.ThrowIfNull``1(``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the object is null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The object to check.</param>
            <param name="parameterName">The expression, which resolves to the parameter name.</param>
        </member>
        <member name="T:FlagLib.IO.FileEventArgs">
            <summary>
            Provides data for the <see cref="E:FlagLib.IO.DirectoryScanner.FileFound"/> event.
            </summary>
        </member>
        <member name="M:FlagLib.IO.FileEventArgs.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.FileEventArgs"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="P:FlagLib.IO.FileEventArgs.File">
            <summary>
            Gets the file.
            </summary>
            <value>
            The file.
            </value>
        </member>
        <member name="T:FlagLib.Collections.EventCollection`1">
            <summary>
            Represents a generic <see cref="T:FlagLib.Collections.EventCollection`1"/> which raises <para/>
            events when items are added or deleted.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</typeparam>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollection`1"/> class.
            </summary>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollection`1"/> class.
            </summary>
            <param name="collection">The collection which gets copied into the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollection`1"/> class.
            </summary>
            <param name="capacity">The initial capacity of the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:FlagLib.Collections.EventCollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the collection to the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <param name="collection">The collection to add.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:FlagLib.Collections.EventCollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:FlagLib.Collections.EventCollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:FlagLib.Collections.EventCollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:FlagLib.Collections.EventCollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:FlagLib.Collections.EventCollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:FlagLib.Collections.EventCollection`1"/> to the specified array, starting at the specified index.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">Index of the <see cref="T:FlagLib.Collections.EventCollection`1"/> where the copy begins.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.Insert(System.Int32,`0)">
             <summary>
             Inserts an item to the <see cref="T:FlagLib.Collections.EventCollection`1"/> at the specified index.
             </summary>
             <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
             <param name="item">The object to insert into the <see cref="T:FlagLib.Collections.EventCollection`1"/>.</param>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.RemoveAt(System.Int32)">
             <summary>
             Removes the <see cref="T:FlagLib.Collections.EventCollection`1"/> item at the specified index.
             </summary>
             <param name="index">The zero-based index of the item to remove.</param>
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:FlagLib.Collections.EventCollection`1"/> is read-only.
               </exception>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemAdded(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemAdded"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemAdding(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemAdding"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemRemoved(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemRemoved"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnItemRemoving(FlagLib.Collections.EventCollectionEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemRemoving"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnCleared(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ListCleared"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.Collections.EventCollection`1.OnClearing(System.EventArgs)">
            <summary>
            Raises the <see cref="E:BeforeListCleared"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
              </returns>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.Item(System.Int32)">
             <summary>
             Gets or sets the element at the specified index.
             </summary>
             <returns>
             The element at the specified index.
               </returns>
            
             <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:FlagLib.Collections.EventCollection`1"/>.
              </exception>
            
             <exception cref="T:System.NotSupportedException">
             The property is set and the  <see cref="T:FlagLib.Collections.EventCollection`1"/> is read-only.
               </exception>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.Capacity">
            <summary>
            Gets or sets the capacity.
            </summary>
            <value>
            The capacity.
            </value>
        </member>
        <member name="P:FlagLib.Collections.EventCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:FlagLib.Collections.EventCollection`1"/> is read-only.
            </summary>
            <returns>true if the  <see cref="T:FlagLib.Collections.EventCollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemAdded">
            <summary>
            Occurs when an item has been added.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemAdding">
            <summary>
            Occurs before an item has been added.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemRemoved">
            <summary>
            Occurs when an item has been removed.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.ItemRemoving">
            <summary>
            Occurs before an item has been removed.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.Cleared">
            <summary>
            Occurs when the <see cref="T:FlagLib.Collections.EventCollection`1"/> has been cleared.
            </summary>
        </member>
        <member name="E:FlagLib.Collections.EventCollection`1.Clearing">
            <summary>
            Occurs before the <see cref="T:FlagLib.Collections.EventCollection`1"/> has been cleared.
            </summary>
        </member>
        <member name="T:FlagLib.Extensions.IComparableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.IComparable`1"/> interface.
            </summary>
        </member>
        <member name="M:FlagLib.Extensions.IComparableExtensions.ThrowIfGreaterThan``1(System.IComparable{``0},``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the value is greater than the limit.
            </summary>
            <param name="value">The value to check.</param>
            <param name="limit">The exclusive limit.</param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:FlagLib.Extensions.IComparableExtensions.ThrowIfGreaterThan``2(System.IComparable{``0},``0,System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the value is greater than the limit.
            </summary>
            <param name="value">The value to check.</param>
            <param name="limit">The exclusive limit.</param>
            <param name="parameterName">The expression that contains the name of the parameter.</param>
            <remarks>
            This method lets the caller define the parameter name as expression,
            so that it can be checked at compile time.
            </remarks>
        </member>
        <member name="M:FlagLib.Extensions.IComparableExtensions.ThrowIfLessThan``1(System.IComparable{``0},``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the value is less than the limit.
            </summary>
            <param name="value">The value to check.</param>
            <param name="limit">The exclusive limit.</param>
            <param name="parameterName">The name of the parameter.</param>
        </member>
        <member name="M:FlagLib.Extensions.IComparableExtensions.ThrowIfLessThan``2(System.IComparable{``0},``0,System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the value is less than the limit.
            </summary>
            <param name="value">The value to check.</param>
            <param name="limit">The exclusive limit.</param>
            <param name="parameterName">The expression that contains the name of the parameter.</param>
            <remarks>
            This method lets the caller define the parameter name as expression,
            so that it can be checked at compile time.
            </remarks>
        </member>
        <member name="T:FlagLib.ValueConverters.BoolNegationValueConverter">
            <summary>
            Provides a <see cref="T:System.Windows.Data.IValueConverter"/> which
            negates a boolean value.
            </summary>
        </member>
        <member name="M:FlagLib.ValueConverters.BoolNegationValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:FlagLib.ValueConverters.BoolNegationValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value back.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:FlagLib.Serialization.GenericXmlSerializer">
            <summary>
            Provides a static and generic xml serializer to serialize collections an single objects.
            </summary>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.SerializeCollection``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Serializes the specified collection at the specified path.
            </summary>
            <typeparam name="T">Type of the items to serialize.</typeparam>
            <param name="collection">The items to serialize.</param>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.SerializeItem``1(``0,System.String)">
            <summary>
            Serializes the specified item to the specified path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item to serialize.</param>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.DeserializeCollection``1(System.String)">
            <summary>
            Deserializes the collection from the specified path.
            </summary>
            <typeparam name="T">The type of the serialized items</typeparam>
            <param name="path">The path of the file with the deserialized data.</param>
            <returns>
            The deserialized collection.
            </returns>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.DeserializeItem``1(System.String)">
            <summary>
            Deserializes the item at the specified path.
            </summary>
            <typeparam name="T">The type of the serialized item</typeparam>
            <param name="path">The path of the file with the serialized data.</param>
            <returns>
            The deserialized item.
            </returns>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.InternalSerialize``1(``0,System.String)">
            <summary>
            Executes the intern Serialize method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="object">The object to serialize.</param>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:FlagLib.Serialization.GenericXmlSerializer.InternDeserialize``1(System.String)">
            <summary>
            Executes the intern Deserialize method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path of the file with the serialized data.</param>
            <returns></returns>
        </member>
        <member name="T:FlagLib.Collections.EventCollectionEventArgs`1">
            <summary>
            Provides data for the events of the <see cref="T:FlagLib.Collections.EventCollection`1"/> class.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
        </member>
        <member name="M:FlagLib.Collections.EventCollectionEventArgs`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.Collections.EventCollectionEventArgs`1"/> class.
            </summary>
            <param name="item">The item that was affected.</param>
            <param name="index">The index of the item that was affected.</param>
        </member>
        <member name="P:FlagLib.Collections.EventCollectionEventArgs`1.Item">
            <summary>
            Gets the item that was affected.
            </summary>
            <value>
            The item that was affected.
            </value>
        </member>
        <member name="P:FlagLib.Collections.EventCollectionEventArgs`1.Index">
            <summary>
            Gets the index of the item which was affected.
            </summary>
            <value>
            The index of the item which was affected.
            </value>
        </member>
        <member name="T:FlagLib.IO.DirectoryEventArgs">
            <summary>
            Provides data for the <see cref="E:FlagLib.IO.DirectoryScanner.DirectoryFound"/> event.
            </summary>
        </member>
        <member name="M:FlagLib.IO.DirectoryEventArgs.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.DirectoryEventArgs"/> class.
            </summary>
            <param name="directory">The directory that has been found.</param>
        </member>
        <member name="P:FlagLib.IO.DirectoryEventArgs.Directory">
            <summary>
            Gets the directorys that has been found.
            </summary>
            <value>
            The directory that has been found.
            </value>
        </member>
        <member name="T:FlagLib.Extensions.IEnumerableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:FlagLib.Extensions.IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Determines whether a sequence contains any of the specified items by using the default equality comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate one of the items.</param>
            <param name="items">The items to locate in the sequence.</param>
            <returns>
              <c>true</c> if the sequence contains any of the specified items; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">source or items is null.</exception>
        </member>
        <member name="M:FlagLib.Extensions.IEnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any of the specified items by using the default equality comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate one of the items.</param>
            <param name="items">The items to locate in the sequence.</param>
            <returns>
              <c>true</c> if the sequence contains any of the specified items; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">source or items is null.</exception>
        </member>
        <member name="M:FlagLib.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the specified action on each item of the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements in the source.</typeparam>
            <param name="source">The sequence to execute the action.</param>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:FlagLib.IO.StreamCopyOperation">
            <summary>
            Provides an operation to copy a stream to another stream.
            </summary>
            <remarks>
            Note that this class does not dispose the streams,
            the caller has to do it himself.
            </remarks>
        </member>
        <member name="M:FlagLib.IO.StreamCopyOperation.#ctor(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.StreamCopyOperation"/> class.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="targetStream">The target stream.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="updateInterval">The interval, after how much copied bytes the <see cref="E:FlagLib.IO.StreamCopyOperation.CopyProgressChanged"/> shall be raised.</param>
        </member>
        <member name="M:FlagLib.IO.StreamCopyOperation.#ctor(System.IO.Stream,System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.StreamCopyOperation"/> class.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="targetStream">The target stream.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="dynamicUpdateInterval">if set to true, the operation uses an dynamic update interval, based on the stream length.;
            otherwise, it uses a predefined update interval</param>
        </member>
        <member name="M:FlagLib.IO.StreamCopyOperation.#ctor(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Prevents a default instance of the <see cref="T:FlagLib.IO.StreamCopyOperation"/> class from being created.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="targetStream">The target stream.</param>
            <param name="bufferSize">The size of the buffer.</param>
        </member>
        <member name="M:FlagLib.IO.StreamCopyOperation.Execute">
            <summary>
            Executes the stream copy operation.
            </summary>
        </member>
        <member name="M:FlagLib.IO.StreamCopyOperation.OnCopyProgressChanged(FlagLib.IO.DataTransferEventArgs{System.IO.Stream,System.IO.Stream})">
            <summary>
            Raises the <see cref="E:FlagLib.IO.StreamCopyOperation.CopyProgressChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.IO.DataTransferEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.StreamCopyOperation.CreateEventArgs">
            <summary>
            Creates the event args.
            </summary>
            <returns></returns>
        </member>
        <member name="E:FlagLib.IO.StreamCopyOperation.CopyProgressChanged">
            <summary>
            Occurs when copy progress has changed.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.AverageSpeed">
            <summary>
            Gets the average speed in bytes per second.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.BufferSize">
            <summary>
            Gets the size of the buffer in bytes.
            </summary>
            <value>
            The size of the buffer in bytes.
            </value>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.UpdateInterval">
            <summary>
            Gets the interval, after how much copied bytes the <see cref="E:FlagLib.IO.StreamCopyOperation.CopyProgressChanged"/> shall be raised.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.EndTime">
            <summary>
            Gets the end time.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.SourceStream">
            <summary>
            Gets the source stream.
            </summary>
        </member>
        <member name="P:FlagLib.IO.StreamCopyOperation.TargetStream">
            <summary>
            Gets the target stream.
            </summary>
        </member>
        <member name="T:FlagLib.Extensions.EventHandlerExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.EventHandler"/> delegate.
            </summary>
        </member>
        <member name="M:FlagLib.Extensions.EventHandlerExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the event handler.
            </summary>
            <typeparam name="T">The type of the event args.</typeparam>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="M:FlagLib.Extensions.EventHandlerExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises the event handler.
            </summary>
            <param name="handler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The event args.</param>
        </member>
        <member name="T:FlagLib.IO.DirectoryScanner">
            <summary>
            Provides a directoy scanner to scan a directory recursively for files
            </summary>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FlagLib.IO.DirectoryScanner"/> class.
            </summary>
            <param name="path">The path of the directory to scan.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.Start">
            <summary>
            Starts the directory scanner.
            </summary>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.Stop">
            <summary>
            Stops the directory scanner.
            </summary>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.OnFileFound(FlagLib.IO.FileEventArgs)">
            <summary>
            Raises the <see cref="E:FileFound"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.IO.FileEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.OnDirectoryFound(FlagLib.IO.DirectoryEventArgs)">
            <summary>
            Raises the <see cref="E:DirectoryFound"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.IO.DirectoryEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.OnDirectoryScanError(FlagLib.IO.DirectoryScanErrorEventArgs)">
            <summary>
            Raises the <see cref="E:DirectoryScanError"/> event.
            </summary>
            <param name="e">The <see cref="T:FlagLib.IO.DirectoryScanErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.OnFinished(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Finished"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.OnDirectoryProceeded(System.EventArgs)">
            <summary>
            Raises the <see cref="E:DirectoryProceeded"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:FlagLib.IO.DirectoryScanner.ScanDirectories(System.String)">
            <summary>
            Scans a directory recursively.
            </summary>
            <param name="rootPath">The root path.</param>
        </member>
        <member name="P:FlagLib.IO.DirectoryScanner.FilesFound">
            <summary>
            Gets the found files.
            </summary>
        </member>
        <member name="P:FlagLib.IO.DirectoryScanner.DirectoryPath">
            <summary>
            Gets the directory path.
            </summary>
        </member>
        <member name="P:FlagLib.IO.DirectoryScanner.IsStopped">
            <summary>
            Gets or sets a value indicating whether the scanner is stopped.
            </summary>
            <value>
            true if the scanner is stopped; otherwise, false.
            </value>
        </member>
        <member name="E:FlagLib.IO.DirectoryScanner.FileFound">
            <summary>
            Occurs when a file has been found.
            </summary>
        </member>
        <member name="E:FlagLib.IO.DirectoryScanner.DirectoryFound">
            <summary>
            Occurs when a directory has been found.
            </summary>
        </member>
        <member name="E:FlagLib.IO.DirectoryScanner.DirectoryScanError">
            <summary>
            Occurs when a directory couldn't be accessed.
            </summary>
        </member>
        <member name="E:FlagLib.IO.DirectoryScanner.DirectoryProceeded">
            <summary>
            Occurs when a directory has been proceeded.
            </summary>
        </member>
        <member name="E:FlagLib.IO.DirectoryScanner.Finished">
            <summary>
            Occurs when the search has finished.
            </summary>
        </member>
        <member name="T:FlagLib.Collections.SerializableDictionary`2">
            <summary>
            Provides a serializable dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:FlagLib.Collections.SerializableDictionary`2.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:FlagLib.Collections.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:FlagLib.Collections.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
    </members>
</doc>
